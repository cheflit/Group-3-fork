name: Python application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        working-directory: ci_lab
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt
      - name: Lint with flake8
        working-directory: ci_lab
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        working-directory: ci_lab
        run: |
          pytest
      - name: Set CI status vars
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "ICON=✅" >> $GITHUB_ENV
            echo "STATUS=PASS" >> $GITHUB_ENV
          else
            echo "ICON=❌" >> $GITHUB_ENV            
            echo "STATUS=FAIL" >> $GITHUB_ENV
          fi
      - name: Comment PR
        if: ${{ github.event_name == 'pull_request' && always() }}
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request?.number;
            if (!pr) core.setFailed('Not a PR event.');
            const body = `${process.env.ICON} **CI ${process.env.STATUS}**
            **Workflow:** \`${{ github.workflow }}\`
            **Job:** \`${{ github.job }}\`
            **Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            **Commit:** \`${{ github.sha }}\``;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body
            });
